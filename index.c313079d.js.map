{"mappings":"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","sources":["src/main.ts"],"sourcesContent":["const ALPHABET: string[] = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\nconst numInput = <HTMLInputElement>document.getElementById('input-number')!;\nconst fromBaseInput = <HTMLInputElement>document.getElementById('input-base-from')!;\nconst toBaseInput = <HTMLInputElement>document.getElementById('input-base-to')!;\nconst fracLenInput = <HTMLInputElement>document.getElementById('input-frac-len')!;\nconst baseOutput = document.getElementById('base-output')!;\nconst productOutput = document.getElementById('product-output')!;\n\nfunction numToBase(n: number, base: number): Array<number> {\n    let o: number[] = [];\n    while (n > 0) {\n        let r = n % base;\n        o.unshift(r);\n        n = Math.floor(n / base);\n    }\n    return o;\n}\n\nfunction fracToBase(n: number, base: number, digits: number): number[] {\n    console.log(\"DO: \", n);\n    let o: number[] = [];\n    for (let i = 0; i < digits; i++) {\n        n *= base;\n        let f = Math.floor(n);\n        if (f >= 1) {\n            n -= f;\n        }\n        o.push(f);\n    }\n    return o;\n}\n\nfunction digitToChar(digit: number): string {\n    if (digit >= 0 && digit <= 9) {\n        return digit.toString();\n    } else if (digit - 10 < ALPHABET.length) {\n        return ALPHABET[digit - 10].toUpperCase();\n    } else {\n        return '?';\n    }\n}\n\nfunction digitsToString(arr: number[]): string {\n    let str = '';\n    for (let d of arr) {\n        str += digitToChar(d);\n    }\n    return str;\n}\n\nfunction charToDigit(char: string): number {\n  return parseInt(char, 36);\n}\n\nfunction stringToDigits(str: string): number[] {\n  let arr: number[] = [];\n  for (let c of str) {\n    arr.push(charToDigit(c));\n  }\n  return arr;\n}\n\nfunction parseNumber(str: string, base: number, neg: bool): number {\n  let digits = stringToDigits(str);\n  console.log(digits);\n  let p = neg ? -1 : digits.length - 1;\n  let sum = 0;\n  for (let d of digits) {\n    console.log(`${d.toString()} * ${base}^${p}`)\n    sum += d * Math.pow(base, p);\n    p--;\n  }\n  return sum;\n}\n\nfunction formatPowers(arr: number[], base: number, start: number): string {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        let p = start - i;\n        if (i != 0) {\n            str += ' + ';\n        }\n        str += `${arr[i]}&middot;${base}<sup>${p}</sup>`;\n    }\n    return str;\n}\n\nfunction removeTrailingZeros(arr: number[]) {\n    while (arr[arr.length - 1] == 0) {\n        arr.pop();\n    }\n}\n\nfunction update() {\n    baseOutput.innerHTML = '';\n    productOutput.innerHTML = '';\n\n    let inputNumber = numInput.value;\n    let inputBase = parseInt(fromBaseInput.value);\n    let base = parseInt(toBaseInput.value);\n    let fracLen = parseInt(fracLenInput.value);\n\n    let parts = inputNumber.split('.');\n    let intPart = parseNumber(parts[0], inputBase, false);\n\n    if (parts.length == 1) {\n        let digits = numToBase(intPart, base);\n        baseOutput.innerHTML = digitsToString(digits);\n        productOutput.innerHTML = formatPowers(digits, base, digits.length - 1);\n    } else if (parts.length == 2) {\n        let fracPart = parseNumber(parts[1], inputBase, true);\n        let intDigits = numToBase(intPart, base);\n        let fracDigits = fracToBase(fracPart, base, fracLen);\n        removeTrailingZeros(fracDigits);\n        baseOutput.innerHTML = digitsToString(intDigits) + '.' + digitsToString(fracDigits);\n        productOutput.innerHTML = formatPowers(intDigits, base, intDigits.length - 1) + ' + ' + formatPowers(fracDigits, base, -1);\n    }\n}\n\nnumInput.addEventListener('input', () => update());\ntoBaseInput.addEventListener('input', () => update());\nfromBaseInput.addEventListener('input', () => update());\nfracLenInput.addEventListener('input', () => update());\n"],"names":["$ad2bcec7a0192558$var$ALPHABET","split","$ad2bcec7a0192558$var$numInput","document","getElementById","$ad2bcec7a0192558$var$fromBaseInput","$ad2bcec7a0192558$var$toBaseInput","$ad2bcec7a0192558$var$fracLenInput","$ad2bcec7a0192558$var$baseOutput","$ad2bcec7a0192558$var$productOutput","$ad2bcec7a0192558$var$numToBase","n","base","o","r","unshift","Math","floor","$ad2bcec7a0192558$var$digitsToString","arr","str","d","digit","toString","length","toUpperCase","$ad2bcec7a0192558$var$parseNumber","neg","digits","c","push","parseInt","$ad2bcec7a0192558$var$stringToDigits","console","log","p","sum","pow","$ad2bcec7a0192558$var$formatPowers","start","i","$ad2bcec7a0192558$var$update","innerHTML","inputNumber","value","inputBase","fracLen","parts","intPart","fracPart","intDigits","fracDigits","f","$ad2bcec7a0192558$var$fracToBase","pop","$ad2bcec7a0192558$var$removeTrailingZeros","addEventListener"],"version":3,"file":"index.c313079d.js.map"}