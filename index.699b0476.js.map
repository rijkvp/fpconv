{"mappings":"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","sources":["src/main.ts"],"sourcesContent":["const ALPHABET: string[] = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\nconst numInput = <HTMLInputElement>document.getElementById('input-number')!;\nconst fromBaseInput = <HTMLInputElement>document.getElementById('input-base-from')!;\nconst toBaseInput = <HTMLInputElement>document.getElementById('input-base-to')!;\nconst fracLenInput = <HTMLInputElement>document.getElementById('input-frac-len')!;\nconst baseOutput = document.getElementById('base-output')!;\nconst productOutput = document.getElementById('product-output')!;\n\nfunction numToBase(n: number, base: number): Array<number> {\n    let o: number[] = [];\n    while (n > 0) {\n        let r = n % base;\n        o.unshift(r);\n        n = Math.floor(n / base);\n    }\n    if (o.length == 0) {\n        o.push(0);\n    }\n    return o;\n}\n\nfunction fracToBase(n: number, base: number, digits: number): number[] {\n    let o: number[] = [];\n    for (let i = 0; i < digits; i++) {\n        n *= base;\n        let f = Math.floor(n);\n        if (f >= 1) {\n            n -= f;\n        }\n        o.push(f);\n    }\n    return o;\n}\n\nfunction digitToChar(digit: number): string {\n    if (digit >= 0 && digit <= 9) {\n        return digit.toString();\n    } else if (digit - 10 < ALPHABET.length) {\n        return ALPHABET[digit - 10].toUpperCase();\n    } else {\n        return '?';\n    }\n}\n\nfunction digitsToString(arr: number[]): string {\n    let str = '';\n    for (let d of arr) {\n        str += digitToChar(d);\n    }\n    return str;\n}\n\nfunction stringToDigits(str: string, base: number): number[] | null {\n    let arr: number[] = [];\n    for (let ch of str) {\n        let d = parseInt(ch, 36);\n        if (d >= base) {\n            return null;\n        } else {\n            arr.push(d);\n        }\n    }\n    return arr;\n}\n\nfunction parseNumber(str: string, base: number, neg: boolean): number | null {\n    let digits = stringToDigits(str, base);\n    if (digits == null) {\n        return null;\n    }\n    let p = neg ? -1 : digits.length - 1;\n    let sum = 0;\n    for (let d of digits) {\n        sum += d * Math.pow(base, p);\n        p--;\n    }\n    return sum;\n}\n\nfunction formatPowers(arr: number[], base: number, start: number): string {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        let p = start - i;\n        if (i != 0) {\n            str += ' + ';\n        }\n        str += `${arr[i]}&middot;${base}<sup>${p}</sup>`;\n    }\n    return str;\n}\n\nfunction removeTrailingZeros(arr: number[]) {\n    while (arr[arr.length - 1] == 0) {\n        arr.pop();\n    }\n}\n\nfunction update() {\n    baseOutput.innerHTML = '';\n    productOutput.innerHTML = '';\n\n    let inputNumber = numInput.value;\n    let inputBase = parseInt(fromBaseInput.value);\n    let base = parseInt(toBaseInput.value);\n    let fracLen = parseInt(fracLenInput.value);\n\n    let parts = inputNumber.split('.');\n    let intPart = parseNumber(parts[0], inputBase, false);\n    if (intPart == null) {\n        baseOutput.innerHTML = 'Invalid input';\n        productOutput.innerHTML = '';\n        return;\n    }\n\n    if (parts.length == 1) {\n        let digits = numToBase(intPart, base);\n        baseOutput.innerHTML = digitsToString(digits);\n        productOutput.innerHTML = formatPowers(digits, base, digits.length - 1);\n    } else if (parts.length == 2) {\n        let fracPart = parseNumber(parts[1], inputBase, true);\n        if (fracPart == null) {\n            baseOutput.innerHTML = 'Invalid input';\n            productOutput.innerHTML = '';\n            return;\n        }\n        let intDigits = numToBase(intPart, base);\n        let fracDigits = fracToBase(fracPart, base, fracLen);\n        removeTrailingZeros(fracDigits);\n        if (fracDigits.length > 0) {\n            baseOutput.innerHTML = digitsToString(intDigits) + '.' + digitsToString(fracDigits);\n            productOutput.innerHTML = formatPowers(intDigits, base, intDigits.length - 1) + ' + ' + formatPowers(fracDigits, base, -1);\n        } else {\n            baseOutput.innerHTML = digitsToString(intDigits);\n            productOutput.innerHTML = formatPowers(intDigits, base, intDigits.length - 1);\n        }\n    }\n}\n\nnumInput.addEventListener('input', () => update());\ntoBaseInput.addEventListener('input', () => update());\nfromBaseInput.addEventListener('input', () => update());\nfracLenInput.addEventListener('input', () => update());\n"],"names":["$ad2bcec7a0192558$var$ALPHABET","split","$ad2bcec7a0192558$var$numInput","document","getElementById","$ad2bcec7a0192558$var$fromBaseInput","$ad2bcec7a0192558$var$toBaseInput","$ad2bcec7a0192558$var$fracLenInput","$ad2bcec7a0192558$var$baseOutput","$ad2bcec7a0192558$var$productOutput","$ad2bcec7a0192558$var$numToBase","n","base","o","r","unshift","Math","floor","length","push","$ad2bcec7a0192558$var$digitsToString","arr","str","d","digit","toString","toUpperCase","$ad2bcec7a0192558$var$parseNumber","neg","digits","ch","parseInt","$ad2bcec7a0192558$var$stringToDigits","p","sum","pow","$ad2bcec7a0192558$var$formatPowers","start","i","$ad2bcec7a0192558$var$update","innerHTML","inputNumber","value","inputBase","fracLen","parts","intPart","fracPart","intDigits","fracDigits","f","$ad2bcec7a0192558$var$fracToBase","pop","$ad2bcec7a0192558$var$removeTrailingZeros","addEventListener"],"version":3,"file":"index.699b0476.js.map"}